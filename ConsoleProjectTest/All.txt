using System.Numerics;
using System.Runtime.CompilerServices;
using System.Text;

namespace ConsoleProjectTest;

internal abstract class Program
{
    static void Main()
    {

        #region SOlUTION

        /*var l1 = new Node(1);
        var l2 = new Node(2);
        var l3 = new Node(3);
        var l4 = new Node(4);
        var l5 = new Node(5);

        l1.Next = l2;
        l2.Prev = l1;
        l2.Next = l3;
        l3.Prev = l2;
        l3.Next = l4;
        l4.Prev = l3;
        l4.Next = l5;
        l5.Prev = l4;
        
        var current = l1;
        while (current != null)
        {
            Console.WriteLine(current.Val);
            current = current.Next;
        }*/
        
        /*ListNode? head = null;
        ListNode? current = null;
        
        var list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8 };
        
        foreach (var num in list)
        {
            if (head is null)
            {
                head =  new ListNode(num);
                current = head;
            }
            else
            {
                current.Next = new ListNode(num);
                current = current.Next;
            }
        }
        
        while (head != null)
        {
            Console.Write(head.Val + " -> ");
            head = head.Next;
        }*/

        /*
        var l1 = new ListNode(1, new ListNode(2, new ListNode(4)));
        var l2 = new ListNode(1, new ListNode(3, new ListNode(4)));

        var head =  MergeTwoLists(l1, l2);

        while (head != null)
        {
            Console.Write(head.val + " -> ");
            head = head.next;
        }*/
        
        /*var head = new ListNode(1, new ListNode(1, new ListNode(2)));
        
        var res = DeleteDuplicates(head);
        while (res != null)
        {
            Console.Write(res.val + " -> ");
            res = res.next;
        }*/
        
        
        

        #endregion

        var node1 = new ListNode(1);
        var node2 = new ListNode(2);
        var node3 = new ListNode(3);
        var node4 = new ListNode(4);

        node1.next = node2;
        node2.next = node3;
        node3.next = node4;

        node4.next = node2;

        Console.WriteLine(HasCycle(node1));
    }

    static bool HasCycle(ListNode head)
    {
        if (head == null || head.next == null)
            return false;

        ListNode slow = head, fast = head;

        while (fast != null && fast.next != null)
        {
            slow = slow.next;          
            fast = fast.next.next;     

            if (slow == fast)           
                return true;
        }

        return false;                   
    }

    #region LEETCODE SOLUTION

    static ListNode DeleteDuplicates(ListNode head)
    {
        var current = head;
        
        while (current != null && current.next != null )
        {
            if (current.val == current.next.val)
            {
                current.next = current.next.next;
            }
            else
            {
                current = current.next;
            }
        }
        
        return head;
    }
    
    static ListNode MergeTwoLists(ListNode list1, ListNode list2)
    {
        var dummy = new ListNode();
        var current = dummy;

        while (list1 != null && list2 != null) 
        {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }

        current.next = list1 ?? list2;

        return dummy.next;
    }


    
        static bool IsPalindrome(int x)
    {
        if (x < 0)
            return false;

        var s = x;
        var temp = 0;
        
        while (s != 0)
        {
            var r = s % 10;
            temp *= 10;
            temp += r;
            s /= 10;
        }
        
        return temp == x;
    }
    
    static int MajorityElement(int[] nums) {
        
        int candidate = 0;
        int count = 0;

        foreach (int num in nums)
        {
            if (count == 0)
            {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }
    
    static string ReverseStr(string s, int k)
    {
        if(1 == s.Length) 
            return s;
        
        var res = "";
        for (var i = 0; i < s.Length; i++)
        {
            char[]? temp = null;
            if (i + k < s.Length)
            {
                temp = s.Substring(i, k).ToArray();
            }
            

            for (var j = 0; j < temp?.Length / 2; j++)
            {
                (temp[j], temp[temp.Length - 1 - j]) = (temp[temp.Length - 1 - j], temp[j]);
            }
            
            res += new string(temp);
            i += k;
            if (i + k < s.Length)
            {
                var builder = new StringBuilder();
                for (var j = 0; j < k; j++)
                {
                    builder.Append(s[i++]);
                }
                
                res += builder.ToString();
                i--;
            }
            else
            {
                var r = s.Length - res.Length;
                if (r <= k)
                {
                    i -= k;
                }
                
                var builder = new StringBuilder();
                while (i < s.Length)
                {
                    builder.Append(s[i++]);
                }
                res += builder.ToString();
            }
        }
      
        return res; 
    }

    #endregion 
}

 public class ListNode(int val = 0, ListNode? next = null)
 {
     public int val = val;
     public ListNode? next = next;
 }

public class Node(int val, Node? next = null, Node? prev = null)
{
    public int Val { get; set; } = val;
    public Node? Next { get; set; } = next;
    public Node? Prev { get; set; } = prev;
}